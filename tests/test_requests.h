// NIST-developed software is provided by NIST as a public service. You may use, copy and distribute copies of the
// software in any medium, provided that you keep intact this entire notice. You may improve, modify and create
// derivative works of the software or any portion of the software, and you may copy and distribute such modifications
// or works. Modified works should carry a notice stating that you changed the software and should note the date and
// nature of any such change. Please explicitly acknowledge the National Institute of Standards and Technology as the
// source of the software. NIST-developed software is expressly provided "AS IS." NIST MAKES NO WARRANTY OF ANY KIND,
// EXPRESS, IMPLIED, IN FACT OR ARISING BY OPERATION OF LAW, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTY OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT AND DATA ACCURACY. NIST NEITHER REPRESENTS NOR
// WARRANTS THAT THE OPERATION OF THE SOFTWARE WILL BE UNINTERRUPTED OR ERROR-FREE, OR THAT ANY DEFECTS WILL BE
// CORRECTED. NIST DOES NOT WARRANT OR MAKE ANY REPRESENTATIONS REGARDING THE USE OF THE SOFTWARE OR THE RESULTS
// THEREOF, INCLUDING BUT NOT LIMITED TO THE CORRECTNESS, ACCURACY, RELIABILITY, OR USEFULNESS OF THE SOFTWARE. You
// are solely responsible for determining the appropriateness of using and distributing the software and you assume
// all risks associated with its use, including but not limited to the risks and costs of program errors, compliance
// with applicable laws, damage to or loss of data, programs or equipment, and the unavailability or interruption of
// operation. This software is not intended to be used in any situation where a failure could cause risk of injury or
// damage to property. The software developed by NIST employees is not subject to copyright protection within the
// United States.

#ifndef FAST_LOADER_TEST_REQUESTS_H
#define FAST_LOADER_TEST_REQUESTS_H

#include <gtest/gtest.h>
#include <array>
#include "tile_loaders/virtual_file_tile_loader.h"

void basicRequest() {
  std::vector<size_t> fullDimension{9, 9, 9}, tileDimension{1, 1, 1};
  auto tl = std::make_shared<VirtualFileTileLoader>(1, fullDimension, tileDimension);
  auto options = std::make_unique<fl::FastLoaderConfiguration<fl::DefaultView<int>>>(tl);
  options->radius(0);
  auto fl = fl::FastLoaderGraph<fl::DefaultView<int>>(std::move(options));
  fl.executeGraph();
  fl.requestAllViews(0);
  fl.finishRequestingViews();

  while (auto viewVariant = fl.getBlockingResult()) {
    auto res = std::get<std::shared_ptr<fl::DefaultView<int>>>(*viewVariant);
    auto index = res->indexCentralTile();
    ASSERT_TRUE(res->originCentralTile()[0] ==
        (int) (100 * index.at(0) + 10 * index.at(1) + index.at(2)));

    res->returnToMemoryManager();
  }
  fl.waitForTermination();
}

void testOrdering() {
  std::vector<size_t> fullDimension{9, 9, 9}, tileDimension{6, 4, 3};
  auto tl = std::make_shared<VirtualFileTileLoader>(1, fullDimension, tileDimension);

  auto options = std::make_unique<fl::FastLoaderConfiguration<fl::DefaultView<int>>>(tl);
  options->radius(1);

  auto fl = fl::FastLoaderGraph<fl::DefaultView<int>>(std::move(options));

  fl::internal::NaiveTraversal traversal{};
  auto truth = traversal.traversal({2, 3, 3});
  size_t numberReceived = 0;

  fl.executeGraph();
  fl.requestAllViews(0);
  fl.finishRequestingViews();

  while (auto viewVariant = fl.getBlockingResult()) {
    auto res = std::get<std::shared_ptr<fl::DefaultView<int>>>(*viewVariant);
    auto index = res->indexCentralTile();
    ASSERT_TRUE(
        truth.at(numberReceived)[0] == index.at(0)
            && truth.at(numberReceived)[1] == index.at(1)
            && truth.at(numberReceived)[2] == index.at(2)
    );
    numberReceived++;
    res->returnToMemoryManager();
  }
  fl.waitForTermination();
}

void testFillingConstant() {
  size_t numberThreads = 1;
  std::vector<size_t> const fullSize{5, 5, 5}, tileSize{2, 2, 2};

  std::vector<size_t> const radii{0, 1, 2, 3};
  std::vector<size_t> const minMaxIndex = {0, 2};

  // Radius / index0 / index1 / index2
  std::array<std::array< std::array< std::array < std::shared_ptr<std::vector<int>>, 3>, 3>, 3>, 4> groundTruths{};

  groundTruths[0][0][0][0] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 1,
      10, 11,

      100, 101,
      110, 111});
  groundTruths[0][0][0][2] = std::make_shared<std::vector<int>>(std::vector<int>{
      4, 0,
      14, 0,

      104, 0,
      114, 0});
  groundTruths[0][0][2][0] = std::make_shared<std::vector<int>>(std::vector<int>{
      40, 41,
      0, 0,

      140, 141,
      0, 0});
  groundTruths[0][0][2][2] = std::make_shared<std::vector<int>>(std::vector<int>{
      44, 0,
      0, 0,

      144, 0,
      0, 0});
  groundTruths[0][2][0][0] = std::make_shared<std::vector<int>>(std::vector<int>{
      400, 401,
      410, 411,

      0, 0,
      0, 0});
  groundTruths[0][2][0][2] = std::make_shared<std::vector<int>>(std::vector<int>{
      404, 0,
      414, 0,

      0, 0,
      0, 0});
  groundTruths[0][2][2][0] = std::make_shared<std::vector<int>>(std::vector<int>{
      440, 441,
      0, 0,

      0, 0,
      0, 0});
  groundTruths[0][2][2][2] = std::make_shared<std::vector<int>>(std::vector<int>{
      444, 0,
      0, 0,

      0, 0,
      0, 0});

  groundTruths[1][0][0][0] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,

      0, 0, 0, 0,
      0, 00, 01, 02,
      0, 10, 11, 12,
      0, 20, 21, 22,

      0, 0, 0, 0,
      0, 100, 101, 102,
      0, 110, 111, 112,
      0, 120, 121, 122,

      0, 0, 0, 0,
      0, 200, 201, 202,
      0, 210, 211, 212,
      0, 220, 221, 222
  });
  groundTruths[1][0][0][2] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,

      0, 0, 0, 0,
      03, 04, 0, 0,
      13, 14, 0, 0,
      23, 24, 0, 0,

      0, 0, 0, 0,
      103, 104, 0, 0,
      113, 114, 0, 0,
      123, 124, 0, 0,

      0, 0, 0, 0,
      203, 204, 0, 0,
      213, 214, 0, 0,
      223, 224, 0, 0
  });

  groundTruths[1][0][2][0] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,

      0, 30, 31, 32,
      0, 40, 41, 42,
      0, 0, 0, 0,
      0, 0, 0, 0,

      0, 130, 131, 132,
      0, 140, 141, 142,
      0, 0, 0, 0,
      0, 0, 0, 0,

      0, 230, 231, 232,
      0, 240, 241, 242,
      0, 0, 0, 0,
      0, 0, 0, 0
  });
  groundTruths[1][0][2][2] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,

      33, 34, 0, 0,
      43, 44, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,

      133, 134, 0, 0,
      143, 144, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0});
  groundTruths[1][2][0][0] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0,
      0, 300, 301, 302,
      0, 310, 311, 312,
      0, 320, 321, 322,

      0, 0, 0, 0,
      0, 400, 401, 402,
      0, 410, 411, 412,
      0, 420, 421, 422,

      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,

      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0
  });
  groundTruths[1][2][0][2] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0,
      303, 304, 0, 0,
      313, 314, 0, 0,
      323, 324, 0, 0,

      0, 0, 0, 0,
      403, 404, 0, 0,
      413, 414, 0, 0,
      423, 424, 0, 0,

      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,

      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0
  });
  groundTruths[1][2][2][0] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 330, 331, 332,
      0, 340, 341, 342,
      0, 0, 0, 0,
      0, 0, 0, 0,

      0, 430, 431, 432,
      0, 440, 441, 442,
      0, 0, 0, 0,
      0, 0, 0, 0,

      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,

      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0
  });
  groundTruths[1][2][2][2] = std::make_shared<std::vector<int>>(std::vector<int>{
      333, 334, 0, 0,
      343, 344, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,

      433, 434, 0, 0,
      443, 444, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,

      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,

      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0
  });

  groundTruths[2][0][0][0] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 00, 01, 02, 03,
      0, 0, 10, 11, 12, 13,
      0, 0, 20, 21, 22, 23,
      0, 0, 30, 31, 32, 33,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 100, 101, 102, 103,
      0, 0, 110, 111, 112, 113,
      0, 0, 120, 121, 122, 123,
      0, 0, 130, 131, 132, 133,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 200, 201, 202, 203,
      0, 0, 210, 211, 212, 213,
      0, 0, 220, 221, 222, 223,
      0, 0, 230, 231, 232, 233,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 300, 301, 302, 303,
      0, 0, 310, 311, 312, 313,
      0, 0, 320, 321, 322, 323,
      0, 0, 330, 331, 332, 333,

  });

  groundTruths[2][0][0][2] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      02, 03, 04, 0, 0, 0,
      12, 13, 14, 0, 0, 0,
      22, 23, 24, 0, 0, 0,
      32, 33, 34, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      102, 103, 104, 0, 0, 0,
      112, 113, 114, 0, 0, 0,
      122, 123, 124, 0, 0, 0,
      132, 133, 134, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      202, 203, 204, 0, 0, 0,
      212, 213, 214, 0, 0, 0,
      222, 223, 224, 0, 0, 0,
      232, 233, 234, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      302, 303, 304, 0, 0, 0,
      312, 313, 314, 0, 0, 0,
      322, 323, 324, 0, 0, 0,
      332, 333, 334, 0, 0, 0,

  });

  groundTruths[2][0][2][0] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 20, 21, 22, 23,
      0, 0, 30, 31, 32, 33,
      0, 0, 40, 41, 42, 43,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 120, 121, 122, 123,
      0, 0, 130, 131, 132, 133,
      0, 0, 140, 141, 142, 143,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 220, 221, 222, 223,
      0, 0, 230, 231, 232, 233,
      0, 0, 240, 241, 242, 243,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 320, 321, 322, 323,
      0, 0, 330, 331, 332, 333,
      0, 0, 340, 341, 342, 343,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

  });

  groundTruths[2][0][2][2] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      22, 23, 24, 0, 0, 0,
      32, 33, 34, 0, 0, 0,
      42, 43, 44, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      122, 123, 124, 0, 0, 0,
      132, 133, 134, 0, 0, 0,
      142, 143, 144, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      222, 223, 224, 0, 0, 0,
      232, 233, 234, 0, 0, 0,
      242, 243, 244, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      322, 323, 324, 0, 0, 0,
      332, 333, 334, 0, 0, 0,
      342, 343, 344, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

  });

  groundTruths[2][2][0][0] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 200, 201, 202, 203,
      0, 0, 210, 211, 212, 213,
      0, 0, 220, 221, 222, 223,
      0, 0, 230, 231, 232, 233,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 300, 301, 302, 303,
      0, 0, 310, 311, 312, 313,
      0, 0, 320, 321, 322, 323,
      0, 0, 330, 331, 332, 333,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 400, 401, 402, 403,
      0, 0, 410, 411, 412, 413,
      0, 0, 420, 421, 422, 423,
      0, 0, 430, 431, 432, 433,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

  });

  groundTruths[2][2][0][2] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      202, 203, 204, 0, 0, 0,
      212, 213, 214, 0, 0, 0,
      222, 223, 224, 0, 0, 0,
      232, 233, 234, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      302, 303, 304, 0, 0, 0,
      312, 313, 314, 0, 0, 0,
      322, 323, 324, 0, 0, 0,
      332, 333, 334, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      402, 403, 404, 0, 0, 0,
      412, 413, 414, 0, 0, 0,
      422, 423, 424, 0, 0, 0,
      432, 433, 434, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

  });

  groundTruths[2][2][2][0] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 220, 221, 222, 223,
      0, 0, 230, 231, 232, 233,
      0, 0, 240, 241, 242, 243,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 320, 321, 322, 323,
      0, 0, 330, 331, 332, 333,
      0, 0, 340, 341, 342, 343,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 420, 421, 422, 423,
      0, 0, 430, 431, 432, 433,
      0, 0, 440, 441, 442, 443,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

  });

  groundTruths[2][2][2][2] = std::make_shared<std::vector<int>>(std::vector<int>{
      222, 223, 224, 0, 0, 0,
      232, 233, 234, 0, 0, 0,
      242, 243, 244, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      322, 323, 324, 0, 0, 0,
      332, 333, 334, 0, 0, 0,
      342, 343, 344, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      422, 423, 424, 0, 0, 0,
      432, 433, 434, 0, 0, 0,
      442, 443, 444, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0,

  });

  groundTruths[3][0][0][0] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 00, 01, 02, 03, 04,
      0, 0, 0, 10, 11, 12, 13, 14,
      0, 0, 0, 20, 21, 22, 23, 24,
      0, 0, 0, 30, 31, 32, 33, 34,
      0, 0, 0, 40, 41, 42, 43, 44,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 100, 101, 102, 103, 104,
      0, 0, 0, 110, 111, 112, 113, 114,
      0, 0, 0, 120, 121, 122, 123, 124,
      0, 0, 0, 130, 131, 132, 133, 134,
      0, 0, 0, 140, 141, 142, 143, 144,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 200, 201, 202, 203, 204,
      0, 0, 0, 210, 211, 212, 213, 214,
      0, 0, 0, 220, 221, 222, 223, 224,
      0, 0, 0, 230, 231, 232, 233, 234,
      0, 0, 0, 240, 241, 242, 243, 244,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 300, 301, 302, 303, 304,
      0, 0, 0, 310, 311, 312, 313, 314,
      0, 0, 0, 320, 321, 322, 323, 324,
      0, 0, 0, 330, 331, 332, 333, 334,
      0, 0, 0, 340, 341, 342, 343, 344,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 400, 401, 402, 403, 404,
      0, 0, 0, 410, 411, 412, 413, 414,
      0, 0, 0, 420, 421, 422, 423, 424,
      0, 0, 0, 430, 431, 432, 433, 434,
      0, 0, 0, 440, 441, 442, 443, 444,

  });

  groundTruths[3][0][0][2] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      01, 02, 03, 04, 0, 0, 0, 0,
      11, 12, 13, 14, 0, 0, 0, 0,
      21, 22, 23, 24, 0, 0, 0, 0,
      31, 32, 33, 34, 0, 0, 0, 0,
      41, 42, 43, 44, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      101, 102, 103, 104, 0, 0, 0, 0,
      111, 112, 113, 114, 0, 0, 0, 0,
      121, 122, 123, 124, 0, 0, 0, 0,
      131, 132, 133, 134, 0, 0, 0, 0,
      141, 142, 143, 144, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      201, 202, 203, 204, 0, 0, 0, 0,
      211, 212, 213, 214, 0, 0, 0, 0,
      221, 222, 223, 224, 0, 0, 0, 0,
      231, 232, 233, 234, 0, 0, 0, 0,
      241, 242, 243, 244, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      301, 302, 303, 304, 0, 0, 0, 0,
      311, 312, 313, 314, 0, 0, 0, 0,
      321, 322, 323, 324, 0, 0, 0, 0,
      331, 332, 333, 334, 0, 0, 0, 0,
      341, 342, 343, 344, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      401, 402, 403, 404, 0, 0, 0, 0,
      411, 412, 413, 414, 0, 0, 0, 0,
      421, 422, 423, 424, 0, 0, 0, 0,
      431, 432, 433, 434, 0, 0, 0, 0,
      441, 442, 443, 444, 0, 0, 0, 0,

  });

  groundTruths[3][0][2][0] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 10, 11, 12, 13, 14,
      0, 0, 0, 20, 21, 22, 23, 24,
      0, 0, 0, 30, 31, 32, 33, 34,
      0, 0, 0, 40, 41, 42, 43, 44,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 110, 111, 112, 113, 114,
      0, 0, 0, 120, 121, 122, 123, 124,
      0, 0, 0, 130, 131, 132, 133, 134,
      0, 0, 0, 140, 141, 142, 143, 144,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 210, 211, 212, 213, 214,
      0, 0, 0, 220, 221, 222, 223, 224,
      0, 0, 0, 230, 231, 232, 233, 234,
      0, 0, 0, 240, 241, 242, 243, 244,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 310, 311, 312, 313, 314,
      0, 0, 0, 320, 321, 322, 323, 324,
      0, 0, 0, 330, 331, 332, 333, 334,
      0, 0, 0, 340, 341, 342, 343, 344,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 410, 411, 412, 413, 414,
      0, 0, 0, 420, 421, 422, 423, 424,
      0, 0, 0, 430, 431, 432, 433, 434,
      0, 0, 0, 440, 441, 442, 443, 444,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

  });

  groundTruths[3][0][2][2] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      11, 12, 13, 14, 0, 0, 0, 0,
      21, 22, 23, 24, 0, 0, 0, 0,
      31, 32, 33, 34, 0, 0, 0, 0,
      41, 42, 43, 44, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      111, 112, 113, 114, 0, 0, 0, 0,
      121, 122, 123, 124, 0, 0, 0, 0,
      131, 132, 133, 134, 0, 0, 0, 0,
      141, 142, 143, 144, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      211, 212, 213, 214, 0, 0, 0, 0,
      221, 222, 223, 224, 0, 0, 0, 0,
      231, 232, 233, 234, 0, 0, 0, 0,
      241, 242, 243, 244, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      311, 312, 313, 314, 0, 0, 0, 0,
      321, 322, 323, 324, 0, 0, 0, 0,
      331, 332, 333, 334, 0, 0, 0, 0,
      341, 342, 343, 344, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      411, 412, 413, 414, 0, 0, 0, 0,
      421, 422, 423, 424, 0, 0, 0, 0,
      431, 432, 433, 434, 0, 0, 0, 0,
      441, 442, 443, 444, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

  });

  groundTruths[3][2][0][0] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 100, 101, 102, 103, 104,
      0, 0, 0, 110, 111, 112, 113, 114,
      0, 0, 0, 120, 121, 122, 123, 124,
      0, 0, 0, 130, 131, 132, 133, 134,
      0, 0, 0, 140, 141, 142, 143, 144,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 200, 201, 202, 203, 204,
      0, 0, 0, 210, 211, 212, 213, 214,
      0, 0, 0, 220, 221, 222, 223, 224,
      0, 0, 0, 230, 231, 232, 233, 234,
      0, 0, 0, 240, 241, 242, 243, 244,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 300, 301, 302, 303, 304,
      0, 0, 0, 310, 311, 312, 313, 314,
      0, 0, 0, 320, 321, 322, 323, 324,
      0, 0, 0, 330, 331, 332, 333, 334,
      0, 0, 0, 340, 341, 342, 343, 344,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 400, 401, 402, 403, 404,
      0, 0, 0, 410, 411, 412, 413, 414,
      0, 0, 0, 420, 421, 422, 423, 424,
      0, 0, 0, 430, 431, 432, 433, 434,
      0, 0, 0, 440, 441, 442, 443, 444,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

  });

  groundTruths[3][2][0][2] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      101, 102, 103, 104, 0, 0, 0, 0,
      111, 112, 113, 114, 0, 0, 0, 0,
      121, 122, 123, 124, 0, 0, 0, 0,
      131, 132, 133, 134, 0, 0, 0, 0,
      141, 142, 143, 144, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      201, 202, 203, 204, 0, 0, 0, 0,
      211, 212, 213, 214, 0, 0, 0, 0,
      221, 222, 223, 224, 0, 0, 0, 0,
      231, 232, 233, 234, 0, 0, 0, 0,
      241, 242, 243, 244, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      301, 302, 303, 304, 0, 0, 0, 0,
      311, 312, 313, 314, 0, 0, 0, 0,
      321, 322, 323, 324, 0, 0, 0, 0,
      331, 332, 333, 334, 0, 0, 0, 0,
      341, 342, 343, 344, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      401, 402, 403, 404, 0, 0, 0, 0,
      411, 412, 413, 414, 0, 0, 0, 0,
      421, 422, 423, 424, 0, 0, 0, 0,
      431, 432, 433, 434, 0, 0, 0, 0,
      441, 442, 443, 444, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

  });

  groundTruths[3][2][2][0] = std::make_shared<std::vector<int>>(std::vector<int>{
      0, 0, 0, 110, 111, 112, 113, 114,
      0, 0, 0, 120, 121, 122, 123, 124,
      0, 0, 0, 130, 131, 132, 133, 134,
      0, 0, 0, 140, 141, 142, 143, 144,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 210, 211, 212, 213, 214,
      0, 0, 0, 220, 221, 222, 223, 224,
      0, 0, 0, 230, 231, 232, 233, 234,
      0, 0, 0, 240, 241, 242, 243, 244,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 310, 311, 312, 313, 314,
      0, 0, 0, 320, 321, 322, 323, 324,
      0, 0, 0, 330, 331, 332, 333, 334,
      0, 0, 0, 340, 341, 342, 343, 344,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 410, 411, 412, 413, 414,
      0, 0, 0, 420, 421, 422, 423, 424,
      0, 0, 0, 430, 431, 432, 433, 434,
      0, 0, 0, 440, 441, 442, 443, 444,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

  });

  groundTruths[3][2][2][2] = std::make_shared<std::vector<int>>(std::vector<int>{
      111, 112, 113, 114, 0, 0, 0, 0,
      121, 122, 123, 124, 0, 0, 0, 0,
      131, 132, 133, 134, 0, 0, 0, 0,
      141, 142, 143, 144, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      211, 212, 213, 214, 0, 0, 0, 0,
      221, 222, 223, 224, 0, 0, 0, 0,
      231, 232, 233, 234, 0, 0, 0, 0,
      241, 242, 243, 244, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      311, 312, 313, 314, 0, 0, 0, 0,
      321, 322, 323, 324, 0, 0, 0, 0,
      331, 332, 333, 334, 0, 0, 0, 0,
      341, 342, 343, 344, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      411, 412, 413, 414, 0, 0, 0, 0,
      421, 422, 423, 424, 0, 0, 0, 0,
      431, 432, 433, 434, 0, 0, 0, 0,
      441, 442, 443, 444, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,

      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
  });

  for (auto radius : radii) {
    auto tl = std::make_shared<VirtualFileTileLoader>(numberThreads, fullSize, tileSize);
    auto options = std::make_unique<fl::FastLoaderConfiguration<fl::DefaultView<int>>>(tl);
    options->radius(radius);
    options->ordered(true);
    options->viewAvailable({1});
    auto fl = fl::FastLoaderGraph<fl::DefaultView<int>>(std::move(options));

    fl.executeGraph();

    for (auto index0 : minMaxIndex) {
      for (auto index1 : minMaxIndex) {
        for (auto index2 : minMaxIndex) {
          fl.requestView({index0, index1, index2});
          auto resVariant = fl.getBlockingResult();
          auto res = std::get<std::shared_ptr<fl::DefaultView<int>>>(*resVariant);
          auto const & truth = groundTruths.at(radius).at(index0).at(index1).at(index2);
          ASSERT_TRUE(std::equal(truth->cbegin(), truth->cend(), res->viewOrigin()));
          res->returnToMemoryManager();
        }
      }
    }

    fl.finishRequestingViews();
    fl.waitForTermination();
  }

}

#endif //FAST_LOADER_TEST_REQUESTS_H
